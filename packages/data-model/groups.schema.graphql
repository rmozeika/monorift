type Group {
	name: String
	gid: Int
	creator: Int
	creator_oauth_id: String
	gravatar: String
	memberOf: Boolean
}
type Member {
	id: Int
	gid: Int
}
type Members {
	uids: [Int]
	oauth_ids: [String]
	users: [User]
}
type GroupMembersPayload {
	group: Group
	members: Members
}
type GroupLists {
	master: [Int]
	memberOf: [Int]
}
type GroupsPayload {
	data: [Group]
	lists: GroupLists
}
# type Mutation {
# 	createUser(input: UserInput!): createUserPayload

# }

type CreateGroupPayload {
	group: Group
	success: Boolean
	error: String
}
type JoinGroupPayload {
	payload: GroupMembersPayload
	success: Boolean
	error: String
}

type GroupsDataAndIds {
	data: [Group]
	gids: [Int]
}
type LeaveGroupPayload {
	success: Boolean
	error: String
}
enum MemberUpdate {
	JOINED
	LEFT
}
type MemberSubscriptionPayload {
	gid: Int
	uid: Int
	update: MemberUpdate
}
extend type Subscription {
	members(gid: Int!): MemberSubscriptionPayload
	# memberLeft(gid: Int!): Member
}

extend type Query {
	group(name: String, gid: Int): Group
	groups(creator: Int): GroupsPayload
	groupMembers(name: String, gid: Int): GroupMembersPayload
	memberOfGroups: GroupsDataAndIds
}

extend type Mutation {
	createGroup(name: String!): CreateGroupPayload
	join(gid: Int!): JoinGroupPayload
	leave(gid: Int!): LeaveGroupPayload
}
