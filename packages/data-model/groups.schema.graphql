type Group {
	name: String
	gid: Int
	creator: Int
}
type Member {
	id: Int
	gid: Int
}
type Members {
	uids: [Int]
	users: [User]
}
type GroupMembersPayload {
	group: Group
	members: Members
}
type GroupLists {
	master: [Int]
	memberOf: [Int]
}
type GroupsPayload {
	data: [Group]
	lists: GroupLists
}
# type Mutation {
# 	createUser(input: UserInput!): createUserPayload

# }

extend type Query {
	group(name: String, gid: Int): Group
	groups(creator: Int): GroupsPayload
	groupMembers(name: String, gid: Int): GroupMembersPayload
}
