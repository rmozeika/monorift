# type User @key(fields: "id"){
type User {
	id: Int
	username: String
	oauth_id: String
	online: Boolean
	email: String
	mongo_id: String
	mocked: Boolean
	guest: Boolean
	gravatar: String
}
fragment UserData on User {
	oauth_id
	username
	online
	gravatar
}

type UserMongo {
	id: Int!
	oauth_id: String!
	username: String!
	email: String
	usingTempUsername: Boolean
	mocked: Boolean
	src: Src
	bit_id: String
}

type Src {
	first_name: String
	last_name: String
	displayName: String
	gravatar: GravatarSrc
}

type GravatarSrc {
	uri: String
	path: String
	url: String
}

input UserInput {
	id: Int
	username: String
	oauth_id: String
	email: String
	mongo_id: String
	mocked: Boolean
	guest: Boolean
	gravatar: String
}

input createMonoriftUserInput {
	username: String!
	password: String
}

type createUserPayload {
	user: User
	success: Boolean
	error: String
}

type Friend {
	status: String
	member1_id: Int
	member2_id: Int
	mocked: Boolean
}

type UserWithFriends {
	id: Int!
	username: String!
	email: String
	usingTempUsername: Boolean
	mocked: Boolean
	bit_id: Int
	src: Src
	friends: FriendsList
}
type FriendsList {
	ids: [String]
	users: [User]
}

type convertGuestPayload {
	user: User
	error: String
	success: Boolean
	savedPassword: Boolean
}

extend type Mutation {
	createUser(input: UserInput!): createUserPayload
	updateUser(data: UserInput, input: UserInput): User
	createGuest(input: createMonoriftUserInput!): createUserPayload
	convertGuest(password: String!): convertGuestPayload
}

extend type Query {
	user(input: UserInput!): User
	userById(id: Int!): User
	users(input: UserInput): [User]
	allUsers: [User]
	friends: FriendsList
	getFriendsForUser(input: UserInput): UserWithFriends
}
